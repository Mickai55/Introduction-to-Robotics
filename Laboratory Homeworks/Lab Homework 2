#include "pitches.h"

const int ledPin = 13;    
const int knockSensor = A5;
const int threshold = 100; 
int count2 = 0;
int whenIPressed = 0;
const int pushButton = 2;
int buttonState = 0;
bool switc = 1;

// these variables will change:
int sensorReading = 0;     
int ledState = LOW;      

int tempo = 80;

// change this to whichever pin you want to use
int buzzer = 8;

// notes of the moledy followed by the duration.
// a 4 means a quarter note, 8 an eighteenth , 16 sixteenth, so on
// !!negative numbers are used to represent dotted notes,
// so -4 means a dotted quarter note, that is, a quarter plus an eighteenth!!
const int melody[] PROGMEM = {

  // Fur Elise - Ludwig van Beethovem
  // Score available at https://musescore.com/user/28149610/scores/5281944

  //starts from 1 ending on 9
  NOTE_E5, 16, NOTE_DS5, 16, //1
  NOTE_E5, 16, NOTE_DS5, 16, NOTE_E5, 16, NOTE_B4, 16, NOTE_D5, 16, NOTE_C5, 16,
  NOTE_A4, -8, NOTE_C4, 16, NOTE_E4, 16, NOTE_A4, 16,
  NOTE_B4, -8, NOTE_E4, 16, NOTE_GS4, 16, NOTE_B4, 16,
  NOTE_C5, 8,  REST, 16, NOTE_E4, 16, NOTE_E5, 16,  NOTE_DS5, 16,
  
  NOTE_E5, 16, NOTE_DS5, 16, NOTE_E5, 16, NOTE_B4, 16, NOTE_D5, 16, NOTE_C5, 16,//6
  NOTE_A4, -8, NOTE_C4, 16, NOTE_E4, 16, NOTE_A4, 16, 
  NOTE_B4, -8, NOTE_E4, 16, NOTE_C5, 16, NOTE_B4, 16, 
  NOTE_A4 , 4, REST, 8, //9 - 1st ending

};

// sizeof gives the number of bytes, each int value is composed of two bytes (16 bits)
// there are two values per note (pitch and duration), so for each note there are four bytes
int notes = sizeof(melody) / sizeof(melody[0]) / 2;

// this calculates the duration of a whole note in ms
int wholenote = (60000 * 4) / tempo;

int divider = 0, noteDuration = 0;

void setup() {
  pinMode(ledPin, OUTPUT);
  pinMode(knockSensor, INPUT);
  pinMode(pushButton, INPUT_PULLUP);
  Serial.begin(9600);    
}

void loop() {
  sensorReading = analogRead(knockSensor);
  int count = millis();
  Serial.println(sensorReading);
  if(sensorReading > 200 && whenIPressed == 0){
    whenIPressed = count;
    switc = 1;
  }

  if (count - whenIPressed >= 2000 && count - whenIPressed <= 2500 && whenIPressed != 0 && switc)//should have been 5000
    for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {
      buttonState = !digitalRead(pushButton);
      if (buttonState == 1)
        switc = 0;
      if(switc){

        // calculates the duration of each note
        divider = pgm_read_word_near(melody+thisNote + 1);
        if (divider > 0) {
          // regular note, just proceed
          noteDuration = (wholenote) / divider;
        } else if (divider < 0) {
          // dotted notes are represented with negative durations!!
          noteDuration = (wholenote) / abs(divider);
          noteDuration *= 1.5; // increases the duration in half for dotted notes
        }
    
        // we only play the note for 90% of the duration, leaving 10% as a pause
        tone(buzzer, pgm_read_word_near(melody+thisNote), noteDuration * 0.9);
    
        // Wait for the specief duration before playing the next note.
        delay(noteDuration);
    
        // stop the waveform generation before the next note.
        noTone(buzzer);
      }
    else{
      whenIPressed = 0;
      
      break;
    }
  }
}
